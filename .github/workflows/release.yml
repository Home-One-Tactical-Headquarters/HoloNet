name: Release

on:
  push:
    branches:
      - main

jobs:
  scope:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      scope: ${{ steps.scope.outputs.scope }}
    steps:
      - name: Get PR labels
        id: labels
        uses: actions-ecosystem/action-get-merged-pull-request@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine scope
        id: scope
        run: |
          labels="${{ steps.labels.outputs.labels }}"
                    if [[ "$labels" == *"scope:major"* ]]; then
                      echo "scope=major" >> $GITHUB_OUTPUT
                    elif [[ "$labels" == *"scope:minor"* ]]; then
                      echo "scope=minor" >> $GITHUB_OUTPUT
                    elif [[ "$labels" == *"scope:patch"* ]]; then
                      echo "scope=patch" >> $GITHUB_OUTPUT
                    else
                      echo "No version label found!" >&2
                      exit 1
                    fi

  build:
    needs: scope
    permissions:
      contents: write
    runs-on: ${{ matrix.os == 'deb' && 'ubuntu-latest' || matrix.os == 'dmg' && 'macos-latest' || matrix.os == 'deb-arm' && 'ubuntu-24.04-arm' || 'windows-latest' }}
    strategy:
      matrix:
        os: [ deb, deb-arm ]
    outputs:
        version: ${{ steps.build.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for all tags and branches

      - name: Exit if not on main branch
        if: endsWith(github.ref, 'main') == false
        run: exit -1

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build packages and push tag
        id: build
        run: |
          reckoned_version=$(./gradlew packageDistributionForCurrentOS reckonTagPush -Preckon.scope=${{ needs.scope.outputs.scope }} -Preckon.stage=final --info 2>&1 | grep -o 'Reckoned version: .*' | cut -d ' ' -f3)
          echo "Reckoned Version: $reckoned_version"
          echo "version=$reckoned_version" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ matrix.os }}
          path: ${{ matrix.os == 'deb' && 'composeApp/build/compose/binaries/main/deb' || matrix.os == 'deb-arm' && 'composeApp/build/compose/binaries/main/deb'|| matrix.os == 'dmg' && 'composeApp/build/compose/binaries/main/dmg' || 'composeApp/build/compose/binaries/main/msi' }}/*

  release:
    needs: build
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist

      - uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ needs.build.outputs.version }}"
          generate_release_notes: true
          files: dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}